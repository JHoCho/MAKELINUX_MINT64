[ORG 0x00]	; 코드의 시작 어드레스를 0x00으로 설정 부트로더를 메모리에 정상적으로 복사하려면 한가지 부트섹터 512바이트중 마지막 2바이트를 0x55 0xAA에 저장하면됩니다
[BITS 16]	; 이하의 코드는 16비트 코드로 설정

SECTION .text	; text 섹션을 정의

jmp 0x07C0:START	; 현재 위치에서 무한루프 수행
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	MINT64 OS에 관련된 환경 설정 값
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	코드 영역
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
START:
	mov ax, 0x07C0	; AX레지스터에 시작어드레스를 레지스터값으로전환
	mov ds, ax		; DS세그먼트 레지스터에 AX 레지스터의 값을 복사
	mov ax, 0xB800	; 비디오메모리 시작어드레스를 세그먼트레지스터값으로 변환
	mov es, ax		; ES세그먼트 렞스터에 설정

	mov si,	0		; SI레지스터 를 초기화

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;화면을 모두 지우고 속성값을 녹색으로 설정함.
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.SCREENCLEARLOOP
	mov byte [ es: si],0;화면을 지우는 루프
						;비디오 ㅔ모리의 문자가 위치하는 어드레스에 0복사하여 문자를 복제
	mov byte [ es: si+1], 0x0A	;비디오 메모리에 속성이 위치하는 어드레스에 0x0A 검은바탕에 밝은녹색을 복사
	add si,2					; 문자와 속성을 설정했으므로 다음 위치로 이동

	cmp si, 80*25*2				;화면 전체의 크기는 80문자 *25 라인임 이후 출력한 문자의 수를 의미하는 si레지스터와 비교
	jl .SCREENCLEARLOOP			;냐fpwltmxjrk 80 25 2 보다 작다면ㅇ 아직 지우지 못한 영영ㄱ이 있으므로 .scrloop레이블ㄹ로 이동

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	화면 상단에 시작 메시지 출력
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	OS이미지를 로딩한다는 메시지 출력
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	디스크에서 OS이미지를 로딩
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	디스크를 읽기 전에 먼저 리셋
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RESETDISK: ; 디스크를 리셋하는 코드의 시작
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	BIOS 리셋 펑션 호출
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	디스크에서 섹터를 읽음
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	BIOS Read Function호출
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	복사할 어드레스와 트랙 헤드 섹터 어드레스 계산
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	OS이미지가 완료되었다는 메세지를 출력
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	로딩한 가상 OS이미지 실행
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	함수 코드 영역
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	X,Y 의 좌표로 비디오 메모리의 어드레스를 계산함.
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	mov si, 0					;SI레지스터 를 초기화(문자열 원본 인덱스 레지스터)
	mov di, 0					;디아이 레지스터 를 초기화( 문자열 대상 인덱스 레지스터)

.MESSAGELOOP:
	mov cl, byte[si + MESSAGE1]	; message의 어드레스에서 레지스터값만큼 더한위치의 문자를cl 레지스터에 복사하며 CL레지스터는 CX레지스터의 하위1바이트를 의미,
								; 문자열은 1바이트면 출분하므로 CX레지스터듸 하위 1바이트만 사용
	cmp cl, 0					;복사된 문자와 0을 비교
	je .MESSAGEEND				; 복사한 문자의 값이 0이면 무자열이 종료되었음을 의미하므로 .MESSAGEEND이동하여 문자출력종료

	mov byte [es: di], cl		;0이 아니면 비디오 메모리 어드레스 0xB800:di에 문자를 출력

	add si, 1					;SI레지스터에 1을 더하여 다음 문자열로 이동
	add di, 2					;DI 레지스터에 2를 더하여 비디오 메모리의 다음 문자 위치로 이동
								;비디오 메모리는 문자 속성쌍으로 구성되므로 문자만 출력하려면 2를 더해야 함
	jmp .MESSAGELOOP			;메세지 출력 루프로 이동하여 다음 문자를 출력
.MESSAGEEND:

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;	데이터 영역
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	jmp $						;현재위치에서 무한 루프 수행
MESSAGE1:	db 'MINT64 OS Boot Loader Start~!!',0	;출력할 메세지 정의
;mov byte[0x00], 'M'		; DS 세그먼트 오프셋 0XB800:0x0000에 M을 복사
;mov byte[0x01], 0x4A	; DS세그먼트 오프셋 0xB800: 0x0001에 0x4A 빨간배경에 밝은 녹색 속성을 복사




times 510 - ($ - $$)	db	0x00	; $: 현재 라인의 어드레스
									; $$:현재섹션의 시작어드레스
									; $-$$
									; 510-($-$$) 현재부터 어드레스 510까지
									; db 0x00 1바이트를 선언하고 값은 0x00
									; time: 반복수행
									; 현재 위치에서 어드레스 510까지 0x00으로 채움
db 0x55			; 1바ㅣ트를 선언하고 값은 0x55
db 0xAA			; 1바이트를 선언하고 값은 0xAA
				; 어드레스 511,512dp 0x55 0xAA를 써서 부트섹터로 표기함
